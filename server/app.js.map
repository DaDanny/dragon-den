{"version":3,"sources":["../../server/app.js"],"names":["Promise","require","connect","mongo","uri","options","connection","on","err","console","error","process","exit","app","server","createServer","socketio","serveClient","path","default","startServer","angularFullstack","listen","port","ip","log","get","exports","module"],"mappings":"AAAA;;;;AAIA;;;;;;AAEA;;;;AACA;;;;AAEA;;;;AACA;;;;;;AAFA,mBAASA,OAAT,GAAmBC,QAAQ,UAAR,CAAnB;;;AAIA;AACA,mBAASC,OAAT,CAAiB,sBAAOC,KAAP,CAAaC,GAA9B,EAAmC,sBAAOD,KAAP,CAAaE,OAAhD;AACA,mBAASC,UAAT,CAAoBC,EAApB,CAAuB,OAAvB,EAAgC,UAASC,GAAT,EAAc;AAC5CC,UAAQC,KAAR,CAAc,+BAA+BF,GAA7C;AACAG,UAAQC,IAAR,CAAa,CAAC,CAAd;AACD,CAHD;;AAKA;AACA,IAAI,IAAJ,EAAU;AAAEX,UAAQ,eAAR;AAA2B;;AAEvC;AACA,IAAIY,MAAM,wBAAV;AACA,IAAIC,SAAS,eAAKC,YAAL,CAAkBF,GAAlB,CAAb;AACA,IAAIG,WAAWf,QAAQ,WAAR,EAAqBa,MAArB,EAA6B;AAC1CG,eAAa,IAD6B;AAE1CC,QAAM;AAFoC,CAA7B,CAAf;AAIAjB,QAAQ,mBAAR,EAA6BkB,OAA7B,CAAqCH,QAArC;AACAf,QAAQ,kBAAR,EAA4BkB,OAA5B,CAAoCN,GAApC;AACAZ,QAAQ,UAAR,EAAoBkB,OAApB,CAA4BN,GAA5B;;AAEA;AACA,SAASO,WAAT,GAAuB;AACrBP,MAAIQ,gBAAJ,GAAuBP,OAAOQ,MAAP,CAAc,sBAAOC,IAArB,EAA2B,sBAAOC,EAAlC,EAAsC,YAAW;AACtEf,YAAQgB,GAAR,CAAY,4CAAZ,EAA0D,sBAAOF,IAAjE,EAAuEV,IAAIa,GAAJ,CAAQ,KAAR,CAAvE;AACD,GAFsB,CAAvB;AAGD;;AAED,4BAAaN,WAAb;;AAEA;AACAO,UAAUC,OAAOD,OAAP,GAAiBd,GAA3B","file":"app.js","sourcesContent":["/**\n * Main application file\n */\n\n'use strict';\n\nimport express from 'express';\nimport mongoose from 'mongoose';\nmongoose.Promise = require('bluebird');\nimport config from './config/environment';\nimport http from 'http';\n\n// Connect to MongoDB\nmongoose.connect(config.mongo.uri, config.mongo.options);\nmongoose.connection.on('error', function(err) {\n  console.error('MongoDB connection error: ' + err);\n  process.exit(-1);\n});\n\n// Populate databases with sample data\nif (true) { require('./config/seed'); }\n\n// Setup server\nvar app = express();\nvar server = http.createServer(app);\nvar socketio = require('socket.io')(server, {\n  serveClient: true,\n  path: '/socket.io-client'\n});\nrequire('./config/socketio').default(socketio);\nrequire('./config/express').default(app);\nrequire('./routes').default(app);\n\n// Start server\nfunction startServer() {\n  app.angularFullstack = server.listen(config.port, config.ip, function() {\n    console.log('Express server listening on %d, in %s mode', config.port, app.get('env'));\n  });\n}\n\nsetImmediate(startServer);\n\n// Expose app\nexports = module.exports = app;\n"]}