{"version":3,"sources":["../../../../server/api/roomTimeline/roomTimeline.controller.js"],"names":["index","show","create","update","destroy","roomTimelineExists","newRoomTimeline","getActiveRoomTimelines","Q","require","respondWithResult","res","statusCode","entity","status","json","saveUpdates","updates","updated","merge","save","then","removeEntity","remove","end","handleEntityNotFound","handleError","err","send","req","find","exec","catch","findById","params","id","body","_id","room","site","startDate","deferred","defer","findOne","forCycleStarting","timeline","reject","errorMessage","tlName","resolve","promise","tlDetails","tlTasks","roomTimeline","timelineTasks","callback"],"mappings":"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","file":"roomTimeline.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/roomTimelines              ->  index\n * POST    /api/roomTimelines              ->  create\n * GET     /api/roomTimelines/:id          ->  show\n * PUT     /api/roomTimelines/:id          ->  update\n * DELETE  /api/roomTimelines/:id          ->  destroy\n */\n\n'use strict';\n\nimport _ from 'lodash';\nimport RoomTimeline from './../../models/roomTimeline.model.js';\nimport mongoose from 'mongoose';\n//var Room = mongoose.model('Room');\nvar Q = require('q');\n\nfunction respondWithResult(res, statusCode) {\n  statusCode = statusCode || 200;\n  return function(entity) {\n    if (entity) {\n      res.status(statusCode).json(entity);\n    }\n  };\n}\n\nfunction saveUpdates(updates) {\n  return function(entity) {\n    var updated = _.merge(entity, updates);\n    return updated.save()\n      .then(updated => {\n        return updated;\n      });\n  };\n}\n\nfunction removeEntity(res) {\n  return function(entity) {\n    if (entity) {\n      return entity.remove()\n        .then(() => {\n          res.status(204).end();\n        });\n    }\n  };\n}\n\nfunction handleEntityNotFound(res) {\n  return function(entity) {\n    if (!entity) {\n      res.status(404).end();\n      return null;\n    }\n    return entity;\n  };\n}\n\nfunction handleError(res, statusCode) {\n  statusCode = statusCode || 500;\n  return function(err) {\n    res.status(statusCode).send(err);\n  };\n}\n\n// Gets a list of RoomTimelines\nexport function index(req, res) {\n  return RoomTimeline.find().exec()\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Gets a single RoomTimeline from the DB\nexport function show(req, res) {\n  return RoomTimeline.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Creates a new RoomTimeline in the DB\nexport function create(req, res) {\n  return RoomTimeline.create(req.body)\n    .then(respondWithResult(res, 201))\n    .catch(handleError(res));\n}\n\n// Updates an existing RoomTimeline in the DB\nexport function update(req, res) {\n  if (req.body._id) {\n    delete req.body._id;\n  }\n  return RoomTimeline.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(saveUpdates(req.body))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Deletes a RoomTimeline from the DB\nexport function destroy(req, res) {\n  return RoomTimeline.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(removeEntity(res))\n    .catch(handleError(res));\n}\n\nexport function roomTimelineExists(room, site, startDate) {\n  var deferred = Q.defer();\n  RoomTimeline.findOne(\n    {room : room,\n    site : site,\n    forCycleStarting : startDate}\n  )\n  .exec(function(err, timeline) {\n    if(err) deferred.reject(err);\n    if(timeline) {\n      var errorMessage = 'A timeline already exists for this room and start date.';\n      if(timeline.tlName) errorMessage = errorMessage + ' It is titled ' + timeline.tlName + '.';\n      deferred.reject({errorMessage :  errorMessage})\n    }\n    if(!timeline) deferred.resolve();\n  })\n  return deferred.promise;\n}\n\n\nexport function newRoomTimeline(tlDetails, tlTasks, startDate) {\n  var roomTimeline = new RoomTimeline({\n    timelineTasks : tlTasks,\n    room : tlDetails.room,\n    site : tlDetails.site,\n    forCycleStarting : startDate,\n    tlName : tlDetails.tlName\n  })\n\n  return roomTimeline.save();\n}\n\nexport function getActiveRoomTimelines(callback) {\n  //Room.find(\n  //  {timelines : {$exists: true, $not:{$size: 0}}}\n  //)\n  //.exec(function(err, rooms) {\n  //  if(err) return callback(err);\n  //  else {\n  //    var roomTimelines = rooms.map(room => {\n  //      var timelines = room.timelines;\n  //      return {\n  //        timelines : timelines.filter(timeline => {\n  //          return new Date(timeline.forCycleStarting) >= new Date(room.startDate);\n  //        }),\n  //        startDate : room.startDate,\n  //        endDate : room.endDate,\n  //        flippedDate : room.flippedDate,\n  //        roomId : room._id\n  //      }\n  //    })\n  //\n  //    return callback(null, roomTimelines);\n  //  }\n  //})\n}\n"]}