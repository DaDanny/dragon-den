{"version":3,"sources":["../../../../server/api/memo/memo.integration.js"],"names":["app","require","newMemo","describe","memos","beforeEach","done","get","expect","end","err","res","body","it","should","be","instanceOf","Array","post","send","name","info","equal","memo","_id","afterEach","updatedMemo","put","delete"],"mappings":"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","file":"memo.integration.js","sourcesContent":["'use strict';\n\nvar app = require('../..');\nimport request from 'supertest';\n\nvar newMemo;\n\ndescribe('Memo API:', function() {\n\n  describe('GET /api/memos', function() {\n    var memos;\n\n    beforeEach(function(done) {\n      request(app)\n        .get('/api/memos')\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          memos = res.body;\n          done();\n        });\n    });\n\n    it('should respond with JSON array', function() {\n      memos.should.be.instanceOf(Array);\n    });\n\n  });\n\n  describe('POST /api/memos', function() {\n    beforeEach(function(done) {\n      request(app)\n        .post('/api/memos')\n        .send({\n          name: 'New Memo',\n          info: 'This is the brand new memo!!!'\n        })\n        .expect(201)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          newMemo = res.body;\n          done();\n        });\n    });\n\n    it('should respond with the newly created memo', function() {\n      newMemo.name.should.equal('New Memo');\n      newMemo.info.should.equal('This is the brand new memo!!!');\n    });\n\n  });\n\n  describe('GET /api/memos/:id', function() {\n    var memo;\n\n    beforeEach(function(done) {\n      request(app)\n        .get('/api/memos/' + newMemo._id)\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          memo = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      memo = {};\n    });\n\n    it('should respond with the requested memo', function() {\n      memo.name.should.equal('New Memo');\n      memo.info.should.equal('This is the brand new memo!!!');\n    });\n\n  });\n\n  describe('PUT /api/memos/:id', function() {\n    var updatedMemo;\n\n    beforeEach(function(done) {\n      request(app)\n        .put('/api/memos/' + newMemo._id)\n        .send({\n          name: 'Updated Memo',\n          info: 'This is the updated memo!!!'\n        })\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end(function(err, res) {\n          if (err) {\n            return done(err);\n          }\n          updatedMemo = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      updatedMemo = {};\n    });\n\n    it('should respond with the updated memo', function() {\n      updatedMemo.name.should.equal('Updated Memo');\n      updatedMemo.info.should.equal('This is the updated memo!!!');\n    });\n\n  });\n\n  describe('DELETE /api/memos/:id', function() {\n\n    it('should respond with 204 on successful removal', function(done) {\n      request(app)\n        .delete('/api/memos/' + newMemo._id)\n        .expect(204)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          done();\n        });\n    });\n\n    it('should respond with 404 when memo does not exist', function(done) {\n      request(app)\n        .delete('/api/memos/' + newMemo._id)\n        .expect(404)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          done();\n        });\n    });\n\n  });\n\n});\n"]}