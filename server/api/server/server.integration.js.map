{"version":3,"sources":["../../../../server/api/server/server.integration.js"],"names":["app","require","newServer","describe","servers","beforeEach","done","get","expect","end","err","res","body","it","should","be","instanceOf","Array","post","send","name","info","equal","server","_id","afterEach","updatedServer","put","delete"],"mappings":"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","file":"server.integration.js","sourcesContent":["'use strict';\n\nvar app = require('../..');\nimport request from 'supertest';\n\nvar newServer;\n\ndescribe('Server API:', function() {\n\n  describe('GET /api/server', function() {\n    var servers;\n\n    beforeEach(function(done) {\n      request(app)\n        .get('/api/server')\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          servers = res.body;\n          done();\n        });\n    });\n\n    it('should respond with JSON array', function() {\n      servers.should.be.instanceOf(Array);\n    });\n\n  });\n\n  describe('POST /api/server', function() {\n    beforeEach(function(done) {\n      request(app)\n        .post('/api/server')\n        .send({\n          name: 'New Server',\n          info: 'This is the brand new server!!!'\n        })\n        .expect(201)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          newServer = res.body;\n          done();\n        });\n    });\n\n    it('should respond with the newly created server', function() {\n      newServer.name.should.equal('New Server');\n      newServer.info.should.equal('This is the brand new server!!!');\n    });\n\n  });\n\n  describe('GET /api/server/:id', function() {\n    var server;\n\n    beforeEach(function(done) {\n      request(app)\n        .get('/api/server/' + newServer._id)\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          server = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      server = {};\n    });\n\n    it('should respond with the requested server', function() {\n      server.name.should.equal('New Server');\n      server.info.should.equal('This is the brand new server!!!');\n    });\n\n  });\n\n  describe('PUT /api/server/:id', function() {\n    var updatedServer;\n\n    beforeEach(function(done) {\n      request(app)\n        .put('/api/server/' + newServer._id)\n        .send({\n          name: 'Updated Server',\n          info: 'This is the updated server!!!'\n        })\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end(function(err, res) {\n          if (err) {\n            return done(err);\n          }\n          updatedServer = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      updatedServer = {};\n    });\n\n    it('should respond with the updated server', function() {\n      updatedServer.name.should.equal('Updated Server');\n      updatedServer.info.should.equal('This is the updated server!!!');\n    });\n\n  });\n\n  describe('DELETE /api/server/:id', function() {\n\n    it('should respond with 204 on successful removal', function(done) {\n      request(app)\n        .delete('/api/server/' + newServer._id)\n        .expect(204)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          done();\n        });\n    });\n\n    it('should respond with 404 when server does not exist', function(done) {\n      request(app)\n        .delete('/api/server/' + newServer._id)\n        .expect(404)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          done();\n        });\n    });\n\n  });\n\n});\n"]}