{"version":3,"sources":["../../../server/models/user.model.js"],"names":["Promise","require","UserSchema","name","String","role","type","default","email","lowercase","password","required","username","usernameLower","firstName","firstNameLower","provider","salt","virtual","get","_id","path","validate","length","value","respond","self","constructor","findOne","exec","then","user","id","catch","err","validatePresenceOf","pre","next","isModified","toLowerCase","Error","makeSalt","saltErr","encryptPassword","encryptErr","hashedPassword","methods","authenticate","callback","pwdGen","byteSize","defaultByteSize","arguments","randomBytes","toString","defaultIterations","defaultKeyLength","Buffer","digest","pbkdf2Sync","pbkdf2","key","model"],"mappings":"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","file":"user.model.js","sourcesContent":["'use strict';\n\nimport crypto from 'crypto';\nimport mongoose from 'mongoose';\nmongoose.Promise = require('bluebird');\nimport {Schema} from 'mongoose';\n\nvar UserSchema = new Schema({\n  name: String,\n  role: {\n    type: String,\n    default: 'user'\n  },\n  email: {\n    type: String,\n    lowercase: true\n  },\n  password: {\n    type: String,\n    required: true\n  },\n  username : String,\n  usernameLower : String,\n  firstName : String,\n  firstNameLower : String,\n  provider: String,\n  salt: String\n});\n\n/**\n * Virtuals\n */\n\n// Public profile information\nUserSchema\n  .virtual('profile')\n  .get(function() {\n    return {\n      'firstName': this.firstName,\n      'role': this.role\n    };\n  });\n\n// Non-sensitive info we'll be putting in the token\nUserSchema\n  .virtual('token')\n  .get(function() {\n    return {\n      '_id': this._id,\n      'role': this.role\n    };\n  });\n\n/**\n * Validations\n */\n\n// Validate empty password\nUserSchema\n  .path('password')\n  .validate(function(password) {\n    return password.length;\n  }, 'Password cannot be blank');\n\n// Validate email is not taken\nUserSchema\n  .path('username')\n  .validate(function(value, respond) {\n    var self = this;\n\n    return this.constructor.findOne({ username: value }).exec()\n      .then(function(user) {\n        if (user) {\n          if (self.id === user.id) {\n            return respond(true);\n          }\n          return respond(false);\n        }\n        return respond(true);\n      })\n      .catch(function(err) {\n        throw err;\n      });\n  }, 'The specified email address is already in use.');\n\nvar validatePresenceOf = function(value) {\n  return value && value.length;\n};\n\n/**\n * Pre-save hook\n */\nUserSchema\n  .pre('save', function(next) {\n    // Handle new/update passwords\n    if (!this.isModified('password')) {\n      return next();\n    }\n\n    if(this.isModified('username')) {\n      this.usernameLower = this.username.toLowerCase()\n    }\n\n    if(this.isModified('firstName')) {\n      this.firstNameLower = this.firstName.toLowerCase();\n    }\n\n    if (!validatePresenceOf(this.password)) {\n      return next(new Error('Invalid password'));\n    }\n\n    // Make salt with a callback\n    this.makeSalt((saltErr, salt) => {\n      if (saltErr) {\n        return next(saltErr);\n      }\n      this.salt = salt;\n      this.encryptPassword(this.password, (encryptErr, hashedPassword) => {\n        if (encryptErr) {\n          return next(encryptErr);\n        }\n        this.password = hashedPassword;\n        next();\n      });\n    });\n  });\n\n/**\n * Methods\n */\nUserSchema.methods = {\n  /**\n   * Authenticate - check if the passwords are the same\n   *\n   * @param {String} password\n   * @param {Function} callback\n   * @return {Boolean}\n   * @api public\n   */\n  authenticate(password, callback) {\n    if (!callback) {\n      return this.password === this.encryptPassword(password);\n    }\n\n    this.encryptPassword(password, (err, pwdGen) => {\n      if (err) {\n        return callback(err);\n      }\n\n      if (this.password === pwdGen) {\n        callback(null, true);\n      } else {\n        callback(null, false);\n      }\n    });\n  },\n\n  /**\n   * Make salt\n   *\n   * @param {Number} byteSize Optional salt byte size, default to 16\n   * @param {Function} callback\n   * @return {String}\n   * @api public\n   */\n  makeSalt(byteSize, callback) {\n    var defaultByteSize = 16;\n\n    if (typeof arguments[0] === 'function') {\n      callback = arguments[0];\n      byteSize = defaultByteSize;\n    } else if (typeof arguments[1] === 'function') {\n      callback = arguments[1];\n    }\n\n    if (!byteSize) {\n      byteSize = defaultByteSize;\n    }\n\n    if (!callback) {\n      return crypto.randomBytes(byteSize).toString('base64');\n    }\n\n    return crypto.randomBytes(byteSize, (err, salt) => {\n      if (err) {\n        callback(err);\n      } else {\n        callback(null, salt.toString('base64'));\n      }\n    });\n  },\n\n  /**\n   * Encrypt password\n   *\n   * @param {String} password\n   * @param {Function} callback\n   * @return {String}\n   * @api public\n   */\n  encryptPassword(password, callback) {\n    if (!password || !this.salt) {\n      if (!callback) {\n        return null;\n      } else {\n        return callback('Missing password or salt');\n      }\n    }\n\n    var defaultIterations = 10000;\n    var defaultKeyLength = 64;\n    var salt = new Buffer(this.salt, 'base64');\n    var digest = 'sha1';\n\n    if (!callback) {\n      return crypto.pbkdf2Sync(password, salt, defaultIterations, defaultKeyLength,digest)\n                   .toString('base64');\n    }\n\n    return crypto.pbkdf2(password, salt, defaultIterations, defaultKeyLength, digest, (err, key) => {\n      if (err) {\n        callback(err);\n      } else {\n        callback(null, key.toString('base64'));\n      }\n    });\n  }\n};\n\nexport default mongoose.model('User', UserSchema);\n"]}