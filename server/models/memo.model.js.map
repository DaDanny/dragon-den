{"version":3,"sources":["../../../server/models/memo.model.js"],"names":["extend","require","Schema","BaseSchema","schema","MemoSchema","name","String","info","active","Boolean","priority","type","default","subPriority","Object","color","sortLevel","rightBarColor","leftBarColor","titleTextColor","memoBarColor","notes","title","backgroundColor","warningColor","memoType","images","Array","isChildMemo","parentMemo","Types","ObjectId","ref","previousParentMemo","childMemos","childIndex","Number","parentIndex","timestamps","path","set","newVal","originalParent","equals","prevParent","_id","pre","next","parentMemoId","childMemoId","previousParentMemoId","self","isNew","constructor","findByIdAndUpdate","$addToSet","exec","err","$pull","isModified","model"],"mappings":"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","file":"memo.model.js","sourcesContent":["'use strict';\n\nimport mongoose from 'mongoose';\nvar extend = require('mongoose-schema-extend');\nvar Schema = mongoose.Schema;\nimport BaseModel from './base.model';\nvar BaseSchema = BaseModel.schema;\n\nvar MemoSchema = new Schema({\n  name: String,\n  info: String,\n  active: Boolean,\n  priority : {type: String, default: 'normal'},\n  subPriority : {type : Object, default : {\n    color : '#4CAF50',\n    sortLevel : 14\n  }},\n  rightBarColor : Object,\n  leftBarColor : Object,\n  titleTextColor : Object,\n  memoBarColor : Object,\n  notes : {type: String, default: ''},\n  title : String,\n  backgroundColor : String,\n  warningColor : String,\n  memoType : String,\n  images : Array,\n  isChildMemo : {type : Boolean, default : false},\n  parentMemo : {type: Schema.Types.ObjectId, ref: 'Memo'},\n  previousParentMemo : {type: Schema.Types.ObjectId, ref: 'Memo'},\n  childMemos : [{type: Schema.Types.ObjectId, ref: 'Memo'}],\n  childIndex : {type : Number, default : null},\n  parentIndex : {type : Number, default : null}\n}, {\n  timestamps : true\n});\n\nMemoSchema.path('parentMemo').set(function(newVal) {\n  let originalParent = this.parentMemo;\n  if(originalParent && !originalParent.equals(newVal)) {\n    this.previousParentMemo = originalParent;\n    let prevParent = originalParent;\n    if(prevParent._id) this.previousParentMemo = prevParent._id;\n    else this.previousParentMemo = prevParent;\n  } else {\n    this.previousParentMemo = newVal;\n  }\n  return newVal;\n})\n\nMemoSchema.pre('save', function(next) {\n  let parentMemoId = this.parentMemo,\n    childMemoId = this._id,\n    previousParentMemoId = this.previousParentMemo,\n    self = this;\n  if(parentMemoId && parentMemoId._id) parentMemoId = parentMemoId._id;\n  if(previousParentMemoId && previousParentMemoId._id) previousParentMemoId = previousParentMemoId._id;\n  // If we created a new child Memo, add the new Memo to it's parent's childMemos array\n  if(this.isNew && this.parentMemo) {\n    this.isChildMemo = true;\n    this.constructor.findByIdAndUpdate(parentMemoId, {$addToSet : {childMemos : childMemoId}})\n      .exec(function(err, parentMemo) {\n        if(err) next(err);\n        else next();\n      })\n  } else if(parentMemoId && !parentMemoId.equals(previousParentMemoId)) { // If we changed parent Memos, remove child from previous parent\n    this.constructor.findByIdAndUpdate(previousParentMemoId, {$pull : {childMemos : childMemoId}})\n      .exec(function(err, parentMemo) {\n        if(err) next(err);\n        else {\n          // Be sure to save it to the new parent\n          self.previousParentMemo = parentMemoId;\n          self.constructor.findByIdAndUpdate(parentMemoId, {$addToSet : {childMemos : childMemoId}})\n            .exec(function(err, parentMemo) {\n              if(err) next(err);\n              else next();\n            })\n        }\n      })\n  } else if(this.isModified('parentMemo')) {\n    if(!this.parentMemo && this.previousParentMemo) {\n      self.constructor.findByIdAndUpdate(previousParentMemoId, {$pull : {childMemos : childMemoId}})\n        .exec(function(err, parentMemo) {\n          if(err) next(err);\n          else next();\n        })\n    } else if(this.parentMemo && this.previousParentMemo) {\n      self.constructor.findByIdAndUpdate(parentMemoId, {$addToSet : {childMemos : childMemoId}})\n        .exec(function(err, parentMemo) {\n          if(err) next(err);\n          else next();\n        })\n    } else {\n      next();\n    }\n  } else {\n    next();\n  }\n})\nexport default mongoose.model('Memo', MemoSchema);\n"]}