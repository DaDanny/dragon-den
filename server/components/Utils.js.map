{"version":3,"sources":["../../../server/components/Utils.js"],"names":["sameDay","compareVersions","day1","day2","getUTCFullYear","getFullYear","getUTCMonth","getUTCDate","v1","v2","options","lexicographical","zeroExtend","v1parts","split","v2parts","isValidPart","x","test","every","NaN","length","push","map","Number","i"],"mappings":";;;;;QAGgBA,O,GAAAA,O;QAKAC,e,GAAAA,e;AARhB;;;AAGO,SAASD,OAAT,CAAiBE,IAAjB,EAAuBC,IAAvB,EAA6B;AAClC,SAAOD,KAAKE,cAAL,MAAyBD,KAAKE,WAAL,EAAzB,IACHH,KAAKI,WAAL,MAAsBH,KAAKG,WAAL,EADnB,IAEHJ,KAAKK,UAAL,MAAqBJ,KAAKI,UAAL,EAFzB;AAGD;AACM,SAASN,eAAT,CAAyBO,EAAzB,EAA6BC,EAA7B,EAAiCC,OAAjC,EAA0C;AAC/C,MAAIC,kBAAkBD,WAAWA,QAAQC,eAAzC;AAAA,MACEC,aAAa,IADf;AAAA,MAEEC,UAAUL,GAAGM,KAAH,CAAS,GAAT,CAFZ;AAAA,MAGEC,UAAUN,GAAGK,KAAH,CAAS,GAAT,CAHZ;;AAKA,WAASE,WAAT,CAAqBC,CAArB,EAAwB;AACtB,WAAO,CAACN,kBAAkB,gBAAlB,GAAqC,OAAtC,EAA+CO,IAA/C,CAAoDD,CAApD,CAAP;AACD;;AAED,MAAI,CAACJ,QAAQM,KAAR,CAAcH,WAAd,CAAD,IAA+B,CAACD,QAAQI,KAAR,CAAcH,WAAd,CAApC,EAAgE;AAC9D,WAAOI,GAAP;AACD;;AAED,MAAIR,UAAJ,EAAgB;AACd,WAAOC,QAAQQ,MAAR,GAAiBN,QAAQM,MAAhC;AAAwCR,cAAQS,IAAR,CAAa,GAAb;AAAxC,KACA,OAAOP,QAAQM,MAAR,GAAiBR,QAAQQ,MAAhC;AAAwCN,cAAQO,IAAR,CAAa,GAAb;AAAxC;AACD;;AAED,MAAI,CAACX,eAAL,EAAsB;AACpBE,cAAUA,QAAQU,GAAR,CAAYC,MAAZ,CAAV;AACAT,cAAUA,QAAQQ,GAAR,CAAYC,MAAZ,CAAV;AACD;;AAED,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIZ,QAAQQ,MAA5B,EAAoC,EAAEI,CAAtC,EAAyC;AACvC,QAAIV,QAAQM,MAAR,IAAkBI,CAAtB,EAAyB;AACvB,aAAO,CAAP;AACD;;AAED,QAAIZ,QAAQY,CAAR,KAAcV,QAAQU,CAAR,CAAlB,EAA8B;AAC5B;AACD,KAFD,MAGK,IAAIZ,QAAQY,CAAR,IAAaV,QAAQU,CAAR,CAAjB,EAA6B;AAChC,aAAO,CAAP;AACD,KAFI,MAGA;AACH,aAAO,CAAC,CAAR;AACD;AACF;;AAED,MAAIZ,QAAQQ,MAAR,IAAkBN,QAAQM,MAA9B,EAAsC;AACpC,WAAO,CAAC,CAAR;AACD;;AAED,SAAO,CAAP;AACD","file":"Utils.js","sourcesContent":["/**\n * Created by Danny on 7/19/16.\n */\nexport function sameDay(day1, day2) {\n  return day1.getUTCFullYear() == day2.getFullYear() &&\n      day1.getUTCMonth() == day2.getUTCMonth() &&\n      day1.getUTCDate() == day2.getUTCDate();\n}\nexport function compareVersions(v1, v2, options) {\n  var lexicographical = options && options.lexicographical,\n    zeroExtend = true,\n    v1parts = v1.split('.'),\n    v2parts = v2.split('.');\n\n  function isValidPart(x) {\n    return (lexicographical ? /^\\d+[A-Za-z]*$/ : /^\\d+$/).test(x);\n  }\n\n  if (!v1parts.every(isValidPart) || !v2parts.every(isValidPart)) {\n    return NaN;\n  }\n\n  if (zeroExtend) {\n    while (v1parts.length < v2parts.length) v1parts.push(\"0\");\n    while (v2parts.length < v1parts.length) v2parts.push(\"0\");\n  }\n\n  if (!lexicographical) {\n    v1parts = v1parts.map(Number);\n    v2parts = v2parts.map(Number);\n  }\n\n  for (var i = 0; i < v1parts.length; ++i) {\n    if (v2parts.length == i) {\n      return 1;\n    }\n\n    if (v1parts[i] == v2parts[i]) {\n      continue;\n    }\n    else if (v1parts[i] > v2parts[i]) {\n      return 1;\n    }\n    else {\n      return -1;\n    }\n  }\n\n  if (v1parts.length != v2parts.length) {\n    return -1;\n  }\n\n  return 0;\n}\n"]}